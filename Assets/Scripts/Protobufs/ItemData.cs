// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: item_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from item_data.proto</summary>
public static partial class ItemDataReflection {

  #region Descriptor
  /// <summary>File descriptor for item_data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ItemDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9pdGVtX2RhdGEucHJvdG8i6QEKCEl0ZW1EYXRhEhQKDGRhdGFfdmVyc2lv",
          "bhgBIAEoCRIRCglkYXRhX2hhc2gYAiABKAkSDwoHaXRlbV9pZBgDIAEoCRIS",
          "CgpodW1hbl9uYW1lGAQgASgJEhUKDXN1Yl90eXBlX2RhdGEYBSABKAwSIgoa",
          "anNvbl9zZXJpYWxpemVkX3RlbXBfc3RhdGUYBiABKAkSHAoJYXJ0QXNzZXRz",
          "GAcgAygLMgkuQXJ0QXNzZXQiNgoISXRlbVR5cGUSCgoGVU5JUVVFEAASDQoJ",
          "QU5PTllNT1VTEAESDwoLUFJPVklTSU9OQUwQAiIyCg9Db2xvclByb3RvYnVm",
          "djESCQoBchgBIAEoAhIJCgFnGAIgASgCEgkKAWIYAyABKAIiPQoPQ29sb3JQ",
          "cm90b2J1ZnYyEgkKAXIYASABKAISCQoBZxgCIAEoAhIJCgFiGAMgASgCEgkK",
          "AWEYBCABKAIiLAoWU3RpY2tBbm9ueW1vdXNJdGVtVHlwZRISCgpudW1fc3Rp",
          "Y2tzGAEgASgFIlAKE1N0aWNrVW5pcXVlSXRlbVR5cGUSEgoKc3RpY2tfdXVp",
          "ZBgBIAEoCRIlCh1kdXJhYmlsaXR5X3BlcmNlbnRfYXNfaW50ZWdlchgCIAEo",
          "BSKDAgoIQXJ0QXNzZXQSCgoCaWQYASABKAkSEQoJSHVtYW5OYW1lGAIgASgJ",
          "EiMKA3RhZxgDIAMoDjIWLkFydEFzc2V0LkFydERlc2lnblRhZxIMCgRkYXRh",
          "GAQgASgMEh8KBWNvbG9yGAUgASgLMhAuQ29sb3JQcm90b2J1ZnYxEiIKCGNv",
          "bG9yTmV3GAYgASgLMhAuQ29sb3JQcm90b2J1ZnYyIioKB0FydFR5cGUSCQoF",
          "SU1BR0UQABIJCgVNT0RFTBABEgkKBUFVRElPEAIiNAoMQXJ0RGVzaWduVGFn",
          "EgsKB1BSRVZJRVcQABIMCghJTl9XT1JMRBABEgkKBVNUT1JFEAJiBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ItemData), global::ItemData.Parser, new[]{ "DataVersion", "DataHash", "ItemId", "HumanName", "SubTypeData", "JsonSerializedTempState", "ArtAssets" }, null, new[]{ typeof(global::ItemData.Types.ItemType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ColorProtobufv1), global::ColorProtobufv1.Parser, new[]{ "R", "G", "B" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ColorProtobufv2), global::ColorProtobufv2.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StickAnonymousItemType), global::StickAnonymousItemType.Parser, new[]{ "NumSticks" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StickUniqueItemType), global::StickUniqueItemType.Parser, new[]{ "StickUuid", "DurabilityPercentAsInteger" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ArtAsset), global::ArtAsset.Parser, new[]{ "Id", "HumanName", "Tag", "Data", "Color", "ColorNew" }, null, new[]{ typeof(global::ArtAsset.Types.ArtType), typeof(global::ArtAsset.Types.ArtDesignTag) }, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ItemData : pb::IMessage<ItemData> {
  private static readonly pb::MessageParser<ItemData> _parser = new pb::MessageParser<ItemData>(() => new ItemData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ItemData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemData(ItemData other) : this() {
    dataVersion_ = other.dataVersion_;
    dataHash_ = other.dataHash_;
    itemId_ = other.itemId_;
    humanName_ = other.humanName_;
    subTypeData_ = other.subTypeData_;
    jsonSerializedTempState_ = other.jsonSerializedTempState_;
    artAssets_ = other.artAssets_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ItemData Clone() {
    return new ItemData(this);
  }

  /// <summary>Field number for the "data_version" field.</summary>
  public const int DataVersionFieldNumber = 1;
  private string dataVersion_ = "";
  /// <summary>
  ///human readable
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataVersion {
    get { return dataVersion_; }
    set {
      dataVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "data_hash" field.</summary>
  public const int DataHashFieldNumber = 2;
  private string dataHash_ = "";
  /// <summary>
  ///hash of all item data (could be git hash for non-dev environments)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DataHash {
    get { return dataHash_; }
    set {
      dataHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "item_id" field.</summary>
  public const int ItemIdFieldNumber = 3;
  private string itemId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ItemId {
    get { return itemId_; }
    set {
      itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "human_name" field.</summary>
  public const int HumanNameFieldNumber = 4;
  private string humanName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HumanName {
    get { return humanName_; }
    set {
      humanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sub_type_data" field.</summary>
  public const int SubTypeDataFieldNumber = 5;
  private pb::ByteString subTypeData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SubTypeData {
    get { return subTypeData_; }
    set {
      subTypeData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "json_serialized_temp_state" field.</summary>
  public const int JsonSerializedTempStateFieldNumber = 6;
  private string jsonSerializedTempState_ = "";
  /// <summary>
  ///short term client side only data for testing, server does not need this data
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string JsonSerializedTempState {
    get { return jsonSerializedTempState_; }
    set {
      jsonSerializedTempState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "artAssets" field.</summary>
  public const int ArtAssetsFieldNumber = 7;
  private static readonly pb::FieldCodec<global::ArtAsset> _repeated_artAssets_codec
      = pb::FieldCodec.ForMessage(58, global::ArtAsset.Parser);
  private readonly pbc::RepeatedField<global::ArtAsset> artAssets_ = new pbc::RepeatedField<global::ArtAsset>();
  /// <summary>
  ///all related art assets
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ArtAsset> ArtAssets {
    get { return artAssets_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ItemData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ItemData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DataVersion != other.DataVersion) return false;
    if (DataHash != other.DataHash) return false;
    if (ItemId != other.ItemId) return false;
    if (HumanName != other.HumanName) return false;
    if (SubTypeData != other.SubTypeData) return false;
    if (JsonSerializedTempState != other.JsonSerializedTempState) return false;
    if(!artAssets_.Equals(other.artAssets_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DataVersion.Length != 0) hash ^= DataVersion.GetHashCode();
    if (DataHash.Length != 0) hash ^= DataHash.GetHashCode();
    if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
    if (HumanName.Length != 0) hash ^= HumanName.GetHashCode();
    if (SubTypeData.Length != 0) hash ^= SubTypeData.GetHashCode();
    if (JsonSerializedTempState.Length != 0) hash ^= JsonSerializedTempState.GetHashCode();
    hash ^= artAssets_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DataVersion.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DataVersion);
    }
    if (DataHash.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DataHash);
    }
    if (ItemId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ItemId);
    }
    if (HumanName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(HumanName);
    }
    if (SubTypeData.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(SubTypeData);
    }
    if (JsonSerializedTempState.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(JsonSerializedTempState);
    }
    artAssets_.WriteTo(output, _repeated_artAssets_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DataVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataVersion);
    }
    if (DataHash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DataHash);
    }
    if (ItemId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemId);
    }
    if (HumanName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HumanName);
    }
    if (SubTypeData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SubTypeData);
    }
    if (JsonSerializedTempState.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonSerializedTempState);
    }
    size += artAssets_.CalculateSize(_repeated_artAssets_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ItemData other) {
    if (other == null) {
      return;
    }
    if (other.DataVersion.Length != 0) {
      DataVersion = other.DataVersion;
    }
    if (other.DataHash.Length != 0) {
      DataHash = other.DataHash;
    }
    if (other.ItemId.Length != 0) {
      ItemId = other.ItemId;
    }
    if (other.HumanName.Length != 0) {
      HumanName = other.HumanName;
    }
    if (other.SubTypeData.Length != 0) {
      SubTypeData = other.SubTypeData;
    }
    if (other.JsonSerializedTempState.Length != 0) {
      JsonSerializedTempState = other.JsonSerializedTempState;
    }
    artAssets_.Add(other.artAssets_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DataVersion = input.ReadString();
          break;
        }
        case 18: {
          DataHash = input.ReadString();
          break;
        }
        case 26: {
          ItemId = input.ReadString();
          break;
        }
        case 34: {
          HumanName = input.ReadString();
          break;
        }
        case 42: {
          SubTypeData = input.ReadBytes();
          break;
        }
        case 50: {
          JsonSerializedTempState = input.ReadString();
          break;
        }
        case 58: {
          artAssets_.AddEntriesFrom(input, _repeated_artAssets_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ItemData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ItemType {
      [pbr::OriginalName("UNIQUE")] Unique = 0,
      [pbr::OriginalName("ANONYMOUS")] Anonymous = 1,
      /// <summary>
      ///ie temporary item before server ack's user action
      /// </summary>
      [pbr::OriginalName("PROVISIONAL")] Provisional = 2,
    }

  }
  #endregion

}

/// <summary>
///migrations with domain specific rules
/// </summary>
public sealed partial class ColorProtobufv1 : pb::IMessage<ColorProtobufv1> {
  private static readonly pb::MessageParser<ColorProtobufv1> _parser = new pb::MessageParser<ColorProtobufv1>(() => new ColorProtobufv1());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ColorProtobufv1> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv1() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv1(ColorProtobufv1 other) : this() {
    r_ = other.r_;
    g_ = other.g_;
    b_ = other.b_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv1 Clone() {
    return new ColorProtobufv1(this);
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 1;
  private float r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 2;
  private float g_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float G {
    get { return g_; }
    set {
      g_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 3;
  private float b_;
  /// <summary>
  ///float a = 4;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ColorProtobufv1);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ColorProtobufv1 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
    if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
    if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (R != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(R);
    }
    if (G != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(G);
    }
    if (B != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(B);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (R != 0F) {
      size += 1 + 4;
    }
    if (G != 0F) {
      size += 1 + 4;
    }
    if (B != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ColorProtobufv1 other) {
    if (other == null) {
      return;
    }
    if (other.R != 0F) {
      R = other.R;
    }
    if (other.G != 0F) {
      G = other.G;
    }
    if (other.B != 0F) {
      B = other.B;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          R = input.ReadFloat();
          break;
        }
        case 21: {
          G = input.ReadFloat();
          break;
        }
        case 29: {
          B = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
///this will be handled by protobufs technically, but not in practice
/// </summary>
public sealed partial class ColorProtobufv2 : pb::IMessage<ColorProtobufv2> {
  private static readonly pb::MessageParser<ColorProtobufv2> _parser = new pb::MessageParser<ColorProtobufv2>(() => new ColorProtobufv2());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ColorProtobufv2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv2(ColorProtobufv2 other) : this() {
    r_ = other.r_;
    g_ = other.g_;
    b_ = other.b_;
    a_ = other.a_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ColorProtobufv2 Clone() {
    return new ColorProtobufv2(this);
  }

  /// <summary>Field number for the "r" field.</summary>
  public const int RFieldNumber = 1;
  private float r_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float R {
    get { return r_; }
    set {
      r_ = value;
    }
  }

  /// <summary>Field number for the "g" field.</summary>
  public const int GFieldNumber = 2;
  private float g_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float G {
    get { return g_; }
    set {
      g_ = value;
    }
  }

  /// <summary>Field number for the "b" field.</summary>
  public const int BFieldNumber = 3;
  private float b_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float B {
    get { return b_; }
    set {
      b_ = value;
    }
  }

  /// <summary>Field number for the "a" field.</summary>
  public const int AFieldNumber = 4;
  private float a_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float A {
    get { return a_; }
    set {
      a_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ColorProtobufv2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ColorProtobufv2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
    if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
    if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
    if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (R != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(R);
    }
    if (G != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(G);
    }
    if (B != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(B);
    }
    if (A != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(A);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (R != 0F) {
      size += 1 + 4;
    }
    if (G != 0F) {
      size += 1 + 4;
    }
    if (B != 0F) {
      size += 1 + 4;
    }
    if (A != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ColorProtobufv2 other) {
    if (other == null) {
      return;
    }
    if (other.R != 0F) {
      R = other.R;
    }
    if (other.G != 0F) {
      G = other.G;
    }
    if (other.B != 0F) {
      B = other.B;
    }
    if (other.A != 0F) {
      A = other.A;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          R = input.ReadFloat();
          break;
        }
        case 21: {
          G = input.ReadFloat();
          break;
        }
        case 29: {
          B = input.ReadFloat();
          break;
        }
        case 37: {
          A = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
///different classes of data and possible upgrades between types
///deeper domain specific rules and interactions with designer-driven data
///leave open possibility of designer leaving in flags/data to do migrations, but then that puts that data on the testing path to avoid data loss/corruption
/// </summary>
public sealed partial class StickAnonymousItemType : pb::IMessage<StickAnonymousItemType> {
  private static readonly pb::MessageParser<StickAnonymousItemType> _parser = new pb::MessageParser<StickAnonymousItemType>(() => new StickAnonymousItemType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StickAnonymousItemType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickAnonymousItemType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickAnonymousItemType(StickAnonymousItemType other) : this() {
    numSticks_ = other.numSticks_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickAnonymousItemType Clone() {
    return new StickAnonymousItemType(this);
  }

  /// <summary>Field number for the "num_sticks" field.</summary>
  public const int NumSticksFieldNumber = 1;
  private int numSticks_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NumSticks {
    get { return numSticks_; }
    set {
      numSticks_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StickAnonymousItemType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StickAnonymousItemType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NumSticks != other.NumSticks) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NumSticks != 0) hash ^= NumSticks.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NumSticks != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NumSticks);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NumSticks != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumSticks);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StickAnonymousItemType other) {
    if (other == null) {
      return;
    }
    if (other.NumSticks != 0) {
      NumSticks = other.NumSticks;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NumSticks = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class StickUniqueItemType : pb::IMessage<StickUniqueItemType> {
  private static readonly pb::MessageParser<StickUniqueItemType> _parser = new pb::MessageParser<StickUniqueItemType>(() => new StickUniqueItemType());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StickUniqueItemType> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickUniqueItemType() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickUniqueItemType(StickUniqueItemType other) : this() {
    stickUuid_ = other.stickUuid_;
    durabilityPercentAsInteger_ = other.durabilityPercentAsInteger_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StickUniqueItemType Clone() {
    return new StickUniqueItemType(this);
  }

  /// <summary>Field number for the "stick_uuid" field.</summary>
  public const int StickUuidFieldNumber = 1;
  private string stickUuid_ = "";
  /// <summary>
  ///link to designer driven assets/etc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string StickUuid {
    get { return stickUuid_; }
    set {
      stickUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "durability_percent_as_integer" field.</summary>
  public const int DurabilityPercentAsIntegerFieldNumber = 2;
  private int durabilityPercentAsInteger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DurabilityPercentAsInteger {
    get { return durabilityPercentAsInteger_; }
    set {
      durabilityPercentAsInteger_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StickUniqueItemType);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StickUniqueItemType other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StickUuid != other.StickUuid) return false;
    if (DurabilityPercentAsInteger != other.DurabilityPercentAsInteger) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StickUuid.Length != 0) hash ^= StickUuid.GetHashCode();
    if (DurabilityPercentAsInteger != 0) hash ^= DurabilityPercentAsInteger.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StickUuid.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(StickUuid);
    }
    if (DurabilityPercentAsInteger != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DurabilityPercentAsInteger);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StickUuid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(StickUuid);
    }
    if (DurabilityPercentAsInteger != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurabilityPercentAsInteger);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StickUniqueItemType other) {
    if (other == null) {
      return;
    }
    if (other.StickUuid.Length != 0) {
      StickUuid = other.StickUuid;
    }
    if (other.DurabilityPercentAsInteger != 0) {
      DurabilityPercentAsInteger = other.DurabilityPercentAsInteger;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          StickUuid = input.ReadString();
          break;
        }
        case 16: {
          DurabilityPercentAsInteger = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///denormalized for the purposes of simplicity, but likely use references (ie guids from art assets or addressable asset reference)
/// </summary>
public sealed partial class ArtAsset : pb::IMessage<ArtAsset> {
  private static readonly pb::MessageParser<ArtAsset> _parser = new pb::MessageParser<ArtAsset>(() => new ArtAsset());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ArtAsset> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ItemDataReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArtAsset() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArtAsset(ArtAsset other) : this() {
    id_ = other.id_;
    humanName_ = other.humanName_;
    tag_ = other.tag_.Clone();
    data_ = other.data_;
    color_ = other.color_ != null ? other.color_.Clone() : null;
    colorNew_ = other.colorNew_ != null ? other.colorNew_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ArtAsset Clone() {
    return new ArtAsset(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  ///how they're used - ie preview, store, in-world/etc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "HumanName" field.</summary>
  public const int HumanNameFieldNumber = 2;
  private string humanName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HumanName {
    get { return humanName_; }
    set {
      humanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tag" field.</summary>
  public const int TagFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ArtAsset.Types.ArtDesignTag> _repeated_tag_codec
      = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::ArtAsset.Types.ArtDesignTag) x);
  private readonly pbc::RepeatedField<global::ArtAsset.Types.ArtDesignTag> tag_ = new pbc::RepeatedField<global::ArtAsset.Types.ArtDesignTag>();
  /// <summary>
  ///maybe strings/etc, but likely code will want to use this more than artists/designers want to iterate
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ArtAsset.Types.ArtDesignTag> Tag {
    get { return tag_; }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 4;
  private pb::ByteString data_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 5;
  private global::ColorProtobufv1 color_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ColorProtobufv1 Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "colorNew" field.</summary>
  public const int ColorNewFieldNumber = 6;
  private global::ColorProtobufv2 colorNew_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ColorProtobufv2 ColorNew {
    get { return colorNew_; }
    set {
      colorNew_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ArtAsset);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ArtAsset other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (HumanName != other.HumanName) return false;
    if(!tag_.Equals(other.tag_)) return false;
    if (Data != other.Data) return false;
    if (!object.Equals(Color, other.Color)) return false;
    if (!object.Equals(ColorNew, other.ColorNew)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (HumanName.Length != 0) hash ^= HumanName.GetHashCode();
    hash ^= tag_.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (color_ != null) hash ^= Color.GetHashCode();
    if (colorNew_ != null) hash ^= ColorNew.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (HumanName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HumanName);
    }
    tag_.WriteTo(output, _repeated_tag_codec);
    if (Data.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Data);
    }
    if (color_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Color);
    }
    if (colorNew_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(ColorNew);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (HumanName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HumanName);
    }
    size += tag_.CalculateSize(_repeated_tag_codec);
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
    }
    if (color_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
    }
    if (colorNew_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColorNew);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ArtAsset other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.HumanName.Length != 0) {
      HumanName = other.HumanName;
    }
    tag_.Add(other.tag_);
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.color_ != null) {
      if (color_ == null) {
        Color = new global::ColorProtobufv1();
      }
      Color.MergeFrom(other.Color);
    }
    if (other.colorNew_ != null) {
      if (colorNew_ == null) {
        ColorNew = new global::ColorProtobufv2();
      }
      ColorNew.MergeFrom(other.ColorNew);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          HumanName = input.ReadString();
          break;
        }
        case 26:
        case 24: {
          tag_.AddEntriesFrom(input, _repeated_tag_codec);
          break;
        }
        case 34: {
          Data = input.ReadBytes();
          break;
        }
        case 42: {
          if (color_ == null) {
            Color = new global::ColorProtobufv1();
          }
          input.ReadMessage(Color);
          break;
        }
        case 50: {
          if (colorNew_ == null) {
            ColorNew = new global::ColorProtobufv2();
          }
          input.ReadMessage(ColorNew);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ArtAsset message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum ArtType {
      [pbr::OriginalName("IMAGE")] Image = 0,
      [pbr::OriginalName("MODEL")] Model = 1,
      [pbr::OriginalName("AUDIO")] Audio = 2,
    }

    public enum ArtDesignTag {
      [pbr::OriginalName("PREVIEW")] Preview = 0,
      [pbr::OriginalName("IN_WORLD")] InWorld = 1,
      [pbr::OriginalName("STORE")] Store = 2,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
